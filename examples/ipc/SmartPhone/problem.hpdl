(define (problem prob) (:domain dom)
  (:objects
    dateForMeeting - date
    myEMailAccount - emailaccount
    davesEMailAddress - emailaddress
    locationForMeeting - location
    gregsMobileNumber - numbermobile
  )

  (:init
    (haveInformation_Contactable dave davesEMailAddress)
    (haveInformation_Contactable greg gregsMobileNumber)
    (inMode_Home)
    (selected myEMailAccount)
    (haveInformation_Regular dateForMeeting)
    (haveInformation_Regular locationForMeeting)
    (type_member_appointment appointmentForMeeting)
    (type_member_call call1)
    (type_member_contactable dave)
    (type_member_contactable greg)
    (type_member_contactableinformation davesEMailAddress)
    (type_member_contactableinformation gregsMobileNumber)
    (type_member_creatable appointmentForMeeting)
    (type_member_date dateForMeeting)
    (type_member_email email1)
    (type_member_emailaccount myEMailAccount)
    (type_member_emailaddress davesEMailAddress)
    (type_member_information dateForMeeting)
    (type_member_information davesEMailAddress)
    (type_member_information gregsMobileNumber)
    (type_member_information locationForMeeting)
    (type_member_location locationForMeeting)
    (type_member_message call1)
    (type_member_message email1)
    (type_member_numbermobile gregsMobileNumber)
    (type_member_person dave)
    (type_member_person greg)
    (type_member_regularinformation dateForMeeting)
    (type_member_regularinformation locationForMeeting)
    (type_member_selectable appointmentForMeeting)
    (type_member_selectable myEMailAccount)
    (type_member_transferablebycall dateForMeeting)
    (type_member_transferablebycall davesEMailAddress)
    (type_member_transferablebycall gregsMobileNumber)
    (type_member_transferablebycall locationForMeeting)
    (type_member_transferablebyemail dateForMeeting)
    (type_member_transferablebyemail davesEMailAddress)
    (type_member_transferablebyemail gregsMobileNumber)
    (type_member_transferablebyemail locationForMeeting)
    (type_member_transferablebyemailcontactable davesEMailAddress)
    (type_member_transferablebyemailcontactable gregsMobileNumber)
    (type_member_transferablebyemailregular dateForMeeting)
    (type_member_transferablebyemailregular locationForMeeting)
    (type_member_transferablebyphonecontactable davesEMailAddress)
    (type_member_transferablebyphonecontactable gregsMobileNumber)
    (type_member_transferablebyphoneregular dateForMeeting)
    (type_member_transferablebyphoneregular locationForMeeting)
    (type_member_transferablebysms dateForMeeting)
    (type_member_transferablebysms davesEMailAddress)
    (type_member_transferablebysms gregsMobileNumber)
    (type_member_transferablebysms locationForMeeting)
    (type_member_transferablebysmscontactable davesEMailAddress)
    (type_member_transferablebysmscontactable gregsMobileNumber)
    (type_member_transferablebysmsregular dateForMeeting)
    (type_member_transferablebysmsregular locationForMeeting)
  )

  (:tasks-goal
      :tasks (
        (call greg call1)
        (send_EMail dave email1)
        (create_Appointment appointmentForMeeting locationForMeeting dateForMeeting)
        (goal_action)
      )
  )
)
